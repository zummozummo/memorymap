-tsc ,axios, ts-node-dev
-create server
-dockerise you application to run it in kubernities
   1)create a image of your code using dockerfile
   2)dockerignore for not adding node modules as we build our docker image
   3)build image to vinkum655/auth
-Create a deployment(will create a set of pods automatically and manage) for the auth image to be loaded up in kubernities cluster
    1)create infra->k8->auth-depl.yaml folder inside memory map
    2)template
    3)spec section is where you define how your pod will behave
    4)replicas: 1 (number of pods for auth service)
    5)selector is telling that take a llok at all the pods and find pod with lable of app:pods
    6)template is where we specify exact configuration of a pod.
    7)container name is only used for loggin purpose
-after creating a deployment we usually want a Kubernities service to go along with it(helps us communicate to this pod)
    0)if we dont specify a type of service it will use "cluster-ip" service  (for inside communication b/w pods)
    1)in selector section we have specified what pod to find
    2)in ports section we want to specify which ports to expose to that pod
    3)Target port is the actual port where the traffic will be redirected by cluster-ip service 

-Skaffold
    1)job of Skaffold is to find all the diffrent things we want to throw in cluster and build.
    2)Skaffold will watch our infa directory if changed any config file the it will automatically apply it to our cluster
    3)it will also make sure if we change anything in auth directory it will sync all the files with container inside the our cluster.
    4)artifacts is all the things the need to be build

    if skaffold not detecting change then change script to "ts-node-dev --poll src/index.ts"

-Ingress-Nginx
    1)load balancer so that outside world can access the server running in kubernities
    2)Host will be pretend domain name, we will connect locally, change host file in local file
        -host file location c:\windows\system32\drivers\etc\hosts
    3)Anytime anyone make requrest to the specified path(eg-api/) we will send that request to backend(auth-srv) and port 3000
    4)when you try to access memeorymap.dev/api/users/currentuser you will get ->your connection is not private
        (Reason for error)ingress-nginx is a web server that will use HTTPS connection for that is uses self signed certificate and 
        chrome does not like self signed certificate. solution-> thisisunsafe 

-Creating Route handler(Design decision)
    1)each route handler will have its own file (create route folder and inside it file for each route handler)
    2)in each route handler file 
        -import express
        -setup a router which is a object that we can use to associate routes with eg const router =express.Router()
        -export the router with alice (https://blog.webdevsimplified.com/2019-12/express-middleware-in-depth/) or https://youtu.be/lY6icfhap2o
        -import it and use all routes app.use(signin)

Route                 method    Body

api/users/signup      post  {email:string,password:string}
api/users/signin      post  {email:string,password:string
api/users/signout     post  {}
api/users/currentuser Get    -

-adding validation 
    -use express-validator npm install express-validator
    -import { body } from 'express-validator'; this will check body of the incoming request to validation on body of the request
    -to make use of this body we will apply it was a middleware.
        -body('email').isEmail().withMessage('Email must be valid')
        -when the above check is not satisfied you some error information will be appended to the body.
    -to catch error from the express-validator we will import validationResult

-Solving complexity around Erros
    Sample error message for email and password which is array of object with a particular structure
    specified in express-validator
    [
        {
            "value": "vina",
            "msg": "Email must be valid",
            "param": "email",
            "location": "body"
        },
        {
            "value": "96",
            "msg": "Password must be b/w 4 & 20 char",
            "param": "password",
            "location": "body"
        }
    ]
    The others service might have diffrent error response, so in mirosservices env whenever we submit
    some invalid data we are going to have error response with diffrent structure now these diffrent 
    error response have to be handled by react app, so insted we will create a standard or generac error 
    response.



    Response of all this error should be identical so that react app can parse that error very easily
    eg- email invalid-----> send error
        email valid -> email already in use -------> send error
        email valid->email alreay not in use-> signup -> database error ->send error

Solution for Error Handling
-----------------------------
    read - https://expressjs.com/en/guide/error-handling.html
    create >src>middlewares folder->error-handler.ts
    requirement for a middleware to be a error handling middleware ->should accept 4 agrument in order
    1)error,req,res,next

    goal of this error handling middleware is that we send a very consistant looking response.
    our job is to look at he Error:error that just occured and format that error and response with consistant format.so that react
    can handle it properly
    once we throw an error inside our application it will be picked up by our error handling middleware.
    while throwing an error pass appropriate message to the middleware eg-send array of object to the middleware
    and teach our middleware to format it correctly.


we are not in js terrotory
const error=new Error("invalid email or password");
error.reasons=error.array();
throw error;(this will be catched by our error middleware)
but beacuse be are in Typescript space we cannot do this.

In Typescript error does not have a reasons property.beacuse we need to send more information from request handler to error
handler and we cannot assign property to error object as we are in Typescript land, 


Problem: we want an object like error but we want to add coustome property to it.

                    Error Object(need to somehow attach this message to error)
                              [{msg:"Bad Email",param,email}]
request error ->Request Handler  --------------------------->Error handling middleware------> structured error output 

Solution: sub class Error

eg->           error---->1)RequestValidationError
                    -----2)DatabaseConnectionError

                    when we create a subclass we will add addtional properties

In error-handling middleware if the Error object is of type RequestValidationError then get the reasons property,
if its DatabaseConnectionError then take Reasons property and send it 
else send a generic error.

create a subclass in folder under src->errors
1)request-validation-error.ts

Object.setPrototypeOf(this,RequestValidationError.prototype)
Whenever we create a new error instance using RequestValidationError,
it actually acts as an instance of Error no RequestValidationError when compiling down to es5. 
So for every instance created using RequestValidationError we set its prototype explicitly using
Object.setPrototypeOf() to its actual class

https://stackoverflow.com/questions/41102060/typescript-extending-error-class/41102306#41102306

--------------------------------------------------
Common Structure of Response when error occurs   |
--------------------------------------------------
{
    errors:{
        message:string,field?:sting           
    }[]
}
note:This is typescrit interface syntax
note:errors property inside of which we have array of objects
note:each of that boject will have mesage,field(optional) property
eg- if email fails message("Invalid email") field(email)
note:we will get the error.response from error handling middleware and create the above structure as a response
--------------------------------------------------
Inside error-handler.ts we have this code which will increase, its better to modularize it.
we are going to add method to RequestValidationError and DatabaseConnectionError called serilizeError()
this method will return all information about the error in the format we want, and this information will 
be used by our eror-handler.ts middleware.

To have the error free structure of we will create interface or abstact class to check.(TS benefit)

we will use abstact class becaue of 'instance of' 
Note on abstact class
-cannot be instansiated
-used to setup requiremnts for subclasses
-do create a class when translated to to JS, which means we can use it in "instance of" check
-interface does not exist in the world of js but abstact class gets converted to class defination

        Error  (Base class)
                 |
        ----------------------------
        CustomeError Abstact class |
        ----------------------------
        statusCode:number          |
        serilizeError():{}[]       |
        ----------------------------
                |
   1)RequestValidationError extends CustomeError
   2)DatabaseConnectionError ""

This is how we create structure in Large application.

Error handing will break in case of async code.
whenever you mark a function as async you will not return value immidately instated its going to return a promise 
that is going to be resolved with some value in future.

eg-
app.all("*",async(req,res,next)=>{
    next(new NotFoundError());
})
we have to rely upon next() function if we are using async, or you can use  'express-async-errors' this package will make sure
that express listen for the error if we throw and error
Note:read express docs
-------------------------------------------------------------------------------------------------
Add DataBase
-npm install mongoose(library with we use to work with mongodb database, we dont have to use it)
-we are going to run mongodb inside a pod
-we are going to create a deployment which will create the pod for us
-inorder to communicated with the pod we have to create a cluster ip service to go along with it
-in total we will write 1 single deployment file for both

Note: if we restart or delete a pod then we will loose all the data, we will figure this later

we will use async awat to connect to database

const start = async () => {
    try {
        await mongoose.connect('mongodb://auth-mongo-srv:27017/auth', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            useCreateIndex: true
        });
    } catch (err) {
        console.error(err);
    }
    app.listen(3000, () => {
        console.log('listening on port 3000!!');
    });
};
start();


we are connected to database.
now we will write signup route code

Flow of Auth
    react App---> signup{email,password}--->auth service

    auth service will check
    1)email already exisit?yes response error   ---->Mongoose User Model------>mongodb(user collection)
    2)hash the password
    3)create a new user and save them to mongodb
    4)User is now considered to be logged in,send them a cookie/jwt

We will create Mongoose User Model(Represt the entire collection of users)
we will also create a mongoose use document(Represts one single user)


Issue #1 with TS+Mongoose
--------------------------

creating a new User document
new User({email:'test@gmail.com',password:'212swewew'});

TS want to know about the value you are passing
but monogoose will not give enough info by default what values we are passing
so we will teach ts what this constructor expects


Issue #2 with TS+Mongoose
--------------------------
const user=new User({email:'test@gmail.com',password:'212swewew'});
console.log(user);
user will have more properties than what we passed in constructor 
we need to teach TS that multiple values will be added to user document that is created



Lets create a user Model
----------------------------
1)create a user Schema
const User=mongoose.model<UserDoc,UserModel>('User',userSchema)
you can think of <> it as types provided to model function as argument


note:If we create a User object the values you passed will not be checkked by TS
so we will sole issue number 1 by create a interface.
2)feed the schem to mongoose and mongoose will create a model out of it
 model is how we access set of data in mongodb database

-------------------------------------------------------------------------------------
Add Hashing to the Password

its reccomended to hash it in our model
But we will create a seperate class for hashing just to make the user model clear(inside service)
note:After the user is save to database we have to consider him logged in 
--------------------------------------------------------------------



































